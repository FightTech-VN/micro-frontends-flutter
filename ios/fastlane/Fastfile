default_platform(:ios)

platform :ios do

  lane :set_environment_app do
    ENV["FIREBASE_APP_ID"] = "1:876997828344:ios:4218bbcc8a4597ed1aa50d"
    ENV["ITC_PROVIDER"] = "86PC33ZDHF"
    ENV["TEAM_ID"] = "86PC33ZDHF"
    ENV["APPLE_APP_ID"] = "1617450766"
    ENV["GROUP_TEST"] = "Tester"
    ENV["PATH_IPA"] = "../build/ios/ipa/FlutterFightKIT.ipa"
    
  end

  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY"],
      is_key_content_base64: true,
      in_house: false # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
    lane :fetch_and_increment_build_number do
    #fetch read your app identifier defined in your Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    current_version = get_version_number(
      xcodeproj: "Runner.xcodeproj",
      target: "Runner" # replace with your main target, required if you have more than one non-test target
    )
    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

  desc "Check certs and profiles"
  lane :prepare_signing do |options|
    app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    profile_name = ENV["PROFILES_NAME"] # replace with the name of your existing profile, or define a name for the profile that fastlane will create if itâ€™s not found
    
    cert(
        api_key: api_key,
        keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
      )
    
    # main app profile
    sigh(
      api_key: api_key,
      app_identifier: app_id,
      provisioning_name: profile_name,
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )
  end

  desc "Update Code Sign"
  lane :update_code_sign do
    # set env
    set_environment_app
    # load data
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
  end
 
  desc "Upload to TestFlight"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    set_environment_app
    ENV["FASTLANE_DONT_STORE_PASSWORD"] = "1"

    upload_to_testflight(
      api_key: api_key,
      app_identifier: app_identifier, 
      itc_provider: ENV["ITC_PROVIDER"],
      team_id: ENV["TEAM_ID"],
      apple_id: ENV["APPLE_APP_ID"],
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      ipa: ENV["PATH_IPA"],
    )

    ENV["FASTLANE_USER"] = ""
    ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = ""
  end

  desc "Distribute app via Firebase Distribution"
  lane :distribute_via_firebase do
    set_environment_app

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"] ,
      groups: ENV["GROUP_TEST"],
      firebase_cli_token: ENV["CONSOLE_FIREBASE_TOKEN"],
      release_notes: sh("git log -1 --pretty='%s'"),
      ipa_path: ENV["PATH_IPA"]
    )
  end
end


